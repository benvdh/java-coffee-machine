type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/SuppliesCalculator.java
  visible: true
  text: "package machine;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\
    import java.util.Map;\n\npublic class SuppliesCalculator {\n    private final\
    \ Map<CoffeeSupply, Long> availableSupplies;\n    private final String SUCCESS_MESSAGE=\"\
    I have enough resources, making you a coffee!\";\n\n    public SuppliesCalculator()\
    \ {\n        Map<CoffeeSupply, Long> initialSupplies = Map.of(\n            CoffeeSupply.WATER,\
    \ 400L,\n            CoffeeSupply.MILK, 540L,\n            CoffeeSupply.BEANS,\
    \ 120L,\n            CoffeeSupply.CUPS, 9L,\n            CoffeeSupply.MONEY, 550L\n\
    \        );\n\n        this.availableSupplies = new HashMap();\n        this.availableSupplies.putAll(initialSupplies);\n\
    \    }\n    \n    public long calculateMaxAmountOfCupsByRecipe(CoffeeRecipe recipe)\
    \ {\n        ArrayList<Long> maxCupsPerIngredient = new ArrayList<>();\n\n   \
    \     for (Map.Entry<CoffeeSupply, Integer> recipeEntry : recipe.getRecipeEntries())\
    \ {\n            maxCupsPerIngredient.add(availableSupplies.get(recipeEntry.getKey())\
    \ / recipeEntry.getValue());\n        }\n\n        return maxCupsPerIngredient.stream().min(Long::compare).get();\n\
    \    }\n\n    public String buyCoffee(CoffeeType coffeeType) {\n        String\
    \ canWeMakeThisCoffee = canWeMakeThisCoffee(coffeeType);\n\n        if(!canWeMakeThisCoffee.equals(SUCCESS_MESSAGE))\
    \ {\n            return canWeMakeThisCoffee;\n        }\n\n        for (Map.Entry<CoffeeSupply,\
    \ Integer> recipeEntry : coffeeType.recipe.getRecipeEntries()) {\n           \
    \ CoffeeSupply supply = recipeEntry.getKey();\n            availableSupplies.put(supply,\
    \ availableSupplies.get(supply) - recipeEntry.getValue());\n        }\n      \
    \  availableSupplies.put(CoffeeSupply.MONEY, availableSupplies.get(CoffeeSupply.MONEY)\
    \ + coffeeType.price);\n\n        return SUCCESS_MESSAGE;\n    }\n\n    public\
    \ String canWeMakeThisCoffee(CoffeeType coffeeType) {\n        for (Map.Entry<CoffeeSupply,\
    \ Integer> recipeEntry : coffeeType.recipe.getRecipeEntries()) {\n           \
    \ CoffeeSupply supply = recipeEntry.getKey();\n            long remainingSupply\
    \ = availableSupplies.get(supply) - recipeEntry.getValue();\n\n            if\
    \ (remainingSupply < 0) {\n                return String.format(\"Sorry, not enough\
    \ %s!\", supply == CoffeeSupply.CUPS ? supply.longUnit : supply.humanReadableName);\n\
    \            }\n        }\n\n        return SUCCESS_MESSAGE;\n    }\n\n    public\
    \ void addSupplies(Map<CoffeeSupply, Long> suppliesToAdd) {\n        for (Map.Entry<CoffeeSupply,\
    \ Long> supplyToAdd: suppliesToAdd.entrySet()) {\n            CoffeeSupply supply\
    \ = supplyToAdd.getKey();\n            availableSupplies.put(supply, availableSupplies.get(supply)\
    \ + supplyToAdd.getValue());\n        }\n    }\n\n    public long withDrawAllMoney()\
    \ {\n        Long moneyWithDrawn = availableSupplies.put(CoffeeSupply.MONEY, 0L);\n\
    \n        return moneyWithDrawn == null ? 0 : moneyWithDrawn;\n    }\n\n    public\
    \ Map<CoffeeSupply, Long> getAvailableSupplies() {\n        return availableSupplies;\n\
    \    }\n}\n"
  learner_created: true
- name: src/machine/MachineAction.java
  visible: true
  text: |
    package machine;

    public enum MachineAction {
        BUY,
        FILL,
        TAKE,
        REMAINING,
        EXIT
    }
  learner_created: true
- name: src/machine/CoffeeSupply.java
  visible: true
  text: |
    package machine;

    public enum CoffeeSupply {
        WATER("water", "ml", "", false),
        MILK("milk", "ml", "", false),
        BEANS("coffee beans", "g", "grams", false),
        CUPS("coffee", "", "disposable cups", false),
        MONEY("money", "$", "", true);


        String humanReadableName;
        String shortUnit;
        String longUnit;
        boolean isCurrency;

        CoffeeSupply(String name, String shortUnit, String longUnit, boolean isCurrency) {
            this.humanReadableName = name;
            this.shortUnit = shortUnit;
            this.longUnit = longUnit;
            this.isCurrency = isCurrency;
        }
    }
  learner_created: true
- name: src/machine/CoffeeRecipe.java
  visible: true
  text: |
    package machine;

    import java.util.Map;
    import java.util.Set;

    public class CoffeeRecipe {
        private final Map<CoffeeSupply, Integer> recipe;

        public CoffeeRecipe(Map<CoffeeSupply, Integer> recipe) {
            this.recipe = recipe;
        }

        public int getQuantityByIngredient(CoffeeSupply coffeeSupply) {
            return recipe.get(coffeeSupply);
        }

        public Set<Map.Entry<CoffeeSupply, Integer>> getRecipeEntries() {
            return recipe.entrySet();
        }

        public Map<CoffeeSupply, Integer> getRecipe() {
            return recipe;
        }
    }
  learner_created: true
- name: src/machine/CoffeeType.java
  visible: true
  text: |
    package machine;

    import java.util.Map;

    public enum CoffeeType {
        ESPRESSO(
            new CoffeeRecipe(
                Map.of(
                    CoffeeSupply.WATER, 250,
                    CoffeeSupply.BEANS, 16,
                    CoffeeSupply.CUPS, 1
                )
            ),
            4
        ),
        LATTE(
            new CoffeeRecipe(
                Map.of(
                    CoffeeSupply.WATER, 350,
                    CoffeeSupply.MILK, 75,
                    CoffeeSupply.BEANS, 20,
                    CoffeeSupply.CUPS, 1
                )
            ),
            7
        ),
        CAPPUCCINO(
            new CoffeeRecipe(
                Map.of(
                    CoffeeSupply.WATER, 200,
                    CoffeeSupply.MILK, 100,
                    CoffeeSupply.BEANS, 12,
                    CoffeeSupply.CUPS, 1
                )
            ),
            6
        );

        CoffeeRecipe recipe;
        long price;

        CoffeeType(CoffeeRecipe recipe, long price) {
            this.recipe = recipe;
            this.price = price;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 08 Aug 2021 18:44:10 UTC
record: -1
